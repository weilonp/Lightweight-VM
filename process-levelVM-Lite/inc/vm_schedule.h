/* DO NOT EDIT THIS FILE
 * - Copyright: Prof. Kevin Andrea, George Mason University.  All Rights Reserved
 * - Date: Jan 2022
 */

#ifndef VM_SCHEDULE_H
#define VM_SCHEDULE_H

#include "vm_settings.h"

// Process Node Definition
typedef struct process_node {
  pid_t pid; // PID of the Process you're Tracking
  char cmd[MAX_CMD]; // Name of the Process being run
  int flags; // Contains the current State of the Process AND the Exit Code (set by OS).
  struct process_node *next; // Pointer to next Process Node in a linked list.
} process_node_t;

// Queue Header Definition
typedef struct queue_header {
  int count; // How many items are in this linked list?
  process_node_t *head; // Points to FIRST node of linked list.  No Dummy Nodes.
} queue_header_t;

// Schedule Header Definition
typedef struct schedule_header {
  queue_header_t *ready_queue; // Linked List of Processes ready to Run on CPU
  queue_header_t *suspended_queue; // Linked List of Processes suspended
  queue_header_t *defunct_queue; // Linked List of Terminated Processes 
} schedule_header_t;

// Prototypes
schedule_header_t *schedule_create(); 
int schedule_insert(schedule_header_t *header, process_node_t *process);
int schedule_suspend(schedule_header_t *header, pid_t pid);
int schedule_resume(schedule_header_t *header, pid_t pid);
int schedule_exit(schedule_header_t *header, process_node_t *process, int exit_code);
int schedule_terminate(schedule_header_t *header, pid_t pid, int exit_code);
process_node_t *schedule_new_process(char *command, pid_t pid, int sudo);
process_node_t *schedule_select(schedule_header_t *header);
int schedule_get_size(queue_header_t *ll);
void schedule_deallocate(schedule_header_t *header);

#endif
